name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    environment: copilot
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache
            node_modules
            packages/*/node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install JavaScript dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: |
          echo "Installing Playwright browsers for UI testing..."
          npx playwright install --with-deps
        env:
          PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright

      - name: Install Java SDK (Required for SonarCloud)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Verify required environment variables
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "Error: SONAR_TOKEN is not set."
            exit 1
          fi
          if [ -z "$GH_TOKEN" ]; then
            echo "Error: GH_TOKEN is not set."
            exit 1
          fi
          echo "All required environment variables are set."
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Setup SonarQube MCP Server Integration
        run: |
          echo "Setting up SonarQube MCP server integration for copilot agent..."
          
          # Set environment variables for SonarQube integration
          echo "SONAR_SERVER_URL=https://sonarcloud.io" >> $GITHUB_ENV
          echo "SONAR_ORGANIZATION=simnova" >> $GITHUB_ENV
          echo "SONAR_PROJECT_KEY=simnova_cellix-data-access" >> $GITHUB_ENV
          
          # Detect if this is a PR context
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR_CONTEXT=true" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
            echo "PR_HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
            echo "PR_BASE_REF=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
            echo "SonarQube MCP server enabled for PR context"
          else
            echo "PR_CONTEXT=false" >> $GITHUB_ENV
            echo "SonarQube MCP server integration available for general analysis"
          fi
          
          # Make the SonarQube MCP server executable
          chmod +x .github/mcp-servers/sonarqube-server.cjs
          
          # Create MCP configuration with environment variables
          sed -e "s|{{SONAR_TOKEN}}|$SONAR_TOKEN|g" \
              -e "s|{{SONAR_SERVER_URL}}|https://sonarcloud.io|g" \
              -e "s|{{SONAR_ORGANIZATION}}|simnova|g" \
              -e "s|{{SONAR_PROJECT_KEY}}|simnova_cellix-data-access|g" \
              -e "s|{{PR_CONTEXT}}|${PR_CONTEXT:-false}|g" \
              -e "s|{{PR_NUMBER}}|${PR_NUMBER:-}|g" \
              .github/mcp-servers/mcp-config.json > /tmp/mcp-config.json
          
          # Make MCP config available to copilot
          echo "MCP_CONFIG_PATH=/tmp/mcp-config.json" >> $GITHUB_ENV
          
          # Test the MCP server connection
          echo "Testing SonarQube MCP server connection..."
          node .github/mcp-servers/sonarqube-server.cjs info || echo "Warning: SonarQube MCP server test failed, but continuing..."
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    