"use strict";(self.webpackChunk_ocom_docs=self.webpackChunk_ocom_docs||[]).push([[6989],{5887:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"decisions/monorepo-turborepo","title":"Monorepo Structure with Turborepo","description":"This MADR explains the decision to use a monorepo structure with Turborepo for build optimization and dependency management.","source":"@site/docs/decisions/0019-monorepo-turborepo.md","sourceDirName":"decisions","slug":"/decisions/monorepo-turborepo","permalink":"/docs/decisions/monorepo-turborepo","draft":false,"unlisted":false,"editUrl":"https://github.com/CellixJs/cellixjs/tree/main/packages/docs/docs/decisions/0019-monorepo-turborepo.md","tags":[],"version":"current","sidebarPosition":19,"frontMatter":{"sidebar_position":19,"sidebar_label":"0019 Monorepo Structure and Turborepo","description":"This MADR explains the decision to use a monorepo structure with Turborepo for build optimization and dependency management.","status":"accepted","date":"2025-09-22T00:00:00.000Z","contact":"gidich nnoce14","deciders":"gidich etang93 mgupta83 nnoce14 iwilson dheruwala"},"sidebar":"docsSidebar","previous":{"title":"0018 Docusaurus Azure Pipeline Stages","permalink":"/docs/decisions/docusaurus-azure-pipeline-stages"}}');var s=i(1360),r=i(9900);const t={sidebar_position:19,sidebar_label:"0019 Monorepo Structure and Turborepo",description:"This MADR explains the decision to use a monorepo structure with Turborepo for build optimization and dependency management.",status:"accepted",date:new Date("2025-09-22T00:00:00.000Z"),contact:"gidich nnoce14",deciders:"gidich etang93 mgupta83 nnoce14 iwilson dheruwala"},c="Monorepo Structure with Turborepo",a={},l=[{value:"Context and Problem Statement",id:"context-and-problem-statement",level:2},{value:"Decision Drivers",id:"decision-drivers",level:2},{value:"Considered Options",id:"considered-options",level:2},{value:"Decision Outcome",id:"decision-outcome",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Validation",id:"validation",level:2},{value:"Pros and Cons of the Options",id:"pros-and-cons-of-the-options",level:2},{value:"NPM Workspaces",id:"npm-workspaces",level:3},{value:"Monorepo with Turborepo",id:"monorepo-with-turborepo",level:3},{value:"Repository Structure",id:"repository-structure",level:2},{value:"Turborepo Configuration",id:"turborepo-configuration",level:2},{value:"Task Dependencies",id:"task-dependencies",level:3},{value:"Selective Execution",id:"selective-execution",level:3},{value:"Package Categories",id:"package-categories",level:3},{value:"More Information",id:"more-information",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"monorepo-structure-with-turborepo",children:"Monorepo Structure with Turborepo"})}),"\n",(0,s.jsx)(n.h2,{id:"context-and-problem-statement",children:"Context and Problem Statement"}),"\n",(0,s.jsx)(n.p,{children:"CellixJS is a complex Domain-Driven Design (DDD) application built on Azure Functions with multiple interconnected packages including domain models, API layers, persistence, GraphQL, and UI components. Initially, the codebase was organized in a way that made it difficult to manage dependencies, optimize builds, and maintain consistent development workflows across packages. We needed a scalable approach to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Manage shared code and dependencies across multiple packages"}),"\n",(0,s.jsx)(n.li,{children:"Optimize build and test performance"}),"\n",(0,s.jsx)(n.li,{children:"Maintain consistent tooling and configurations"}),"\n",(0,s.jsx)(n.li,{children:"Enable efficient CI/CD pipelines"}),"\n",(0,s.jsx)(n.li,{children:"Support both frontend and backend development workflows"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The challenge was to choose between maintaining separate repositories or consolidating into a monorepo, and selecting appropriate tooling for build orchestration and caching."}),"\n",(0,s.jsx)(n.h2,{id:"decision-drivers",children:"Decision Drivers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build Performance"}),": Need for fast incremental builds and efficient caching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependency Management"}),": Shared code and consistent dependency versions across packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Developer Experience"}),": Unified development environment and tooling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI/CD Efficiency"}),": Selective builds and caching in automated pipelines"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Organization"}),": Clear separation between application and library packages, with logical grouping"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scalability"}),": Ability to add new packages without architectural overhead"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"considered-options",children:"Considered Options"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NPM Workspaces"}),": Leverage NPM workspaces with typescript project references. Each package in ",(0,s.jsx)(n.code,{children:"packages/"})," directory"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monorepo with Turborepo"}),": Focused build orchestration and caching tool. Repository structure following turborepo conventions"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"decision-outcome",children:"Decision Outcome"}),"\n",(0,s.jsx)(n.p,{children:"We will use a monorepo structure with Turborepo for build orchestration, caching, and task management. The repository is organized with:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"packages/"})," directory containing shared libraries and domain-specific packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"apps/"})," directory containing deployable applications"]}),"\n",(0,s.jsx)(n.li,{children:"Turborepo configuration for selective builds and dependency management"}),"\n",(0,s.jsx)(n.li,{children:"npm workspaces for package management"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["See the following ",(0,s.jsx)(n.a,{href:"https://turbo.build/repo/docs/guides/tools",children:"Turborepo documentation"})," for reference."]}),"\n",(0,s.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,s.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved Build Performance"}),": Turborepo's intelligent caching reduces build times by 50-80% for unchanged packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Selective Execution"}),": Only affected packages and their dependents are built/tested"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unified Development Environment"}),": Single repository with consistent tooling and configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient CI/CD"}),": Azure Pipelines integration with selective builds and remote caching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better Dependency Management"}),": npm workspaces ensure consistent dependency versions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clear Code Organization"}),": Logical separation between domain, application, and infrastructure concerns"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Increased Repository Size"}),": All packages in one repository can lead to larger clones"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex Initial Setup"}),": Turborepo configuration requires careful task dependency management"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Learning Curve"}),": Team needs to understand Turborepo concepts and selective execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Potential for Tighter Coupling"}),": Monorepo can encourage tighter coupling between packages"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,s.jsx)(n.p,{children:"The monorepo structure and Turborepo usage is validated through:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build Performance Metrics"}),": Local builds complete in ~160ms for cached packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI/CD Pipeline Efficiency"}),": PR builds are 30-60% faster due to selective execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Code Quality Gates"}),": All packages maintain consistent linting, testing, and coverage standards"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependency Resolution"}),": npm workspaces ensure no version conflicts between packages"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pros-and-cons-of-the-options",children:"Pros and Cons of the Options"}),"\n",(0,s.jsx)(n.h3,{id:"npm-workspaces",children:"NPM Workspaces"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Good"}),": Built-in to npm, no additional tooling required"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Good"}),": Simple setup with package.json workspaces field"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Neutral"}),": Basic support for linking local packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bad"}),": No advanced build orchestration or caching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bad"}),": Limited to package management only"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"monorepo-with-turborepo",children:"Monorepo with Turborepo"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Good"}),": Excellent build performance with intelligent caching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Good"}),": Simple configuration and focused on build orchestration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Good"}),": Seamless CI/CD integration with remote caching"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Good"}),": Fast and reliable for our package structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Neutral"}),": Less code generation features compared to Nx"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bad"}),": Limited to build/task orchestration (no code generation)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"repository-structure",children:"Repository Structure"}),"\n",(0,s.jsx)(n.p,{children:"The monorepo follows this structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"packages/                      # Shared libraries  \n\u251c\u2500\u2500 cellix/                    # Shared seedwork libraries for CellixJS applications \n\u2502   \u251c\u2500\u2500 domain-seedwork/       # Domain modeling base classes\n\u2502   \u251c\u2500\u2500 typescript-config/     # Shared TypeScript configurations\n\u2502   \u251c\u2500\u2500 vitest-config/         # Shared testing configurations\n\u2502   \u2514\u2500\u2500 mock-*                 # Mocking utilities for local development\n\u2502   \u2514\u2500\u2500 ui-core/               # Shared UI components\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 ocom/                      # Application-specific packages (OwnerCommunity)\n\u2502   \u251c\u2500\u2500 domain/                # Domain models and business logic\n\u2502   \u251c\u2500\u2500 graphql/               # GraphQL schema and resolvers\n\u2502   \u251c\u2500\u2500 persistence/           # Data access layer\n\u2502   \u2514\u2500\u2500 service-*              # Infrastructure services\n|   \u2514\u2500\u2500 ...\n\napps/                          # Deployable applications \n\u251c\u2500\u2500 api/                       # Azure Functions application (Backend)\n\u251c\u2500\u2500 docs/                      # Documentation site (Docusaurus)\n\u2514\u2500\u2500 ui-community/              # React UI application (Frontend)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"turborepo-configuration",children:"Turborepo Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"task-dependencies",children:"Task Dependencies"}),"\n",(0,s.jsx)(n.p,{children:"Turborepo manages task execution with dependency graphs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "tasks": {\n    "build": {\n      "dependsOn": ["^build"],\n      "outputs": ["dist/**", "build/**"]\n    },\n    "test": {\n      "dependsOn": ["^build"]\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"selective-execution",children:"Selective Execution"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local Development"}),": ",(0,s.jsx)(n.code,{children:"turbo run build"})," builds only affected packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI/CD"}),": Azure Pipelines detects changes and builds selectively"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"}),": Local ",(0,s.jsx)(n.code,{children:".turbo"})," directory and remote Azure Cache@2"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"package-categories",children:"Package Categories"}),"\n",(0,s.jsx)(n.p,{children:"Packages are categorized by tags for selective deployments:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"frontend"}),": UI applications and components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"backend"}),": API, domain, and infrastructure packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"mock"}),": Local development utilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"config"}),": Shared configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"docs"}),": Documentation"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"more-information",children:"More Information"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://turbo.build/repo/docs",children:"Turborepo Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://turborepo.com/docs/crafting-your-repository/structuring-a-repository",children:"Turborepo - Structuring a Repository"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://turborepo.com/docs/guides/tools/typescript",children:"Turborepo - Typescript"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v9/using-npm/workspaces",children:"npm Workspaces"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/docs/decisions/docusaurus-azure-pipeline-stages",children:"Azure Pipelines Integration"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},9900:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var o=i(6364);const s={},r=o.createContext(s);function t(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);