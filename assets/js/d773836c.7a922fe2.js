"use strict";(self.webpackChunk_ocom_docs=self.webpackChunk_ocom_docs||[]).push([[4804],{7562:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"decisions/azure-devops-monorepo-pipeline","title":"Azure DevOps Monorepo Pipeline Architecture","description":"Architecture Decision Record for Azure DevOps monorepo CI/CD pipeline design and conditional deployment strategy.","source":"@site/docs/decisions/0020-azure-devops-monorepo-pipeline.md","sourceDirName":"decisions","slug":"/decisions/azure-devops-monorepo-pipeline","permalink":"/docs/decisions/azure-devops-monorepo-pipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/CellixJs/cellixjs/tree/main/packages/docs/docs/decisions/0020-azure-devops-monorepo-pipeline.md","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"sidebar_label":"0020 Azure DevOps Monorepo Pipeline","description":"Architecture Decision Record for Azure DevOps monorepo CI/CD pipeline design and conditional deployment strategy.","status":"accepted","contact":"gidich nnoce14","date":"2025-10-08T00:00:00.000Z","deciders":"gidich etang93 mgupta83 nnoce14 iwilson dheruwala","consulted":"etang93 mgupta83","informed":null},"sidebar":"docsSidebar","previous":{"title":"0019 Monorepo Structure and Turborepo","permalink":"/docs/decisions/monorepo-turborepo"}}');var l=i(1360),t=i(9900);const o={sidebar_position:20,sidebar_label:"0020 Azure DevOps Monorepo Pipeline",description:"Architecture Decision Record for Azure DevOps monorepo CI/CD pipeline design and conditional deployment strategy.",status:"accepted",contact:"gidich nnoce14",date:new Date("2025-10-08T00:00:00.000Z"),deciders:"gidich etang93 mgupta83 nnoce14 iwilson dheruwala",consulted:"etang93 mgupta83",informed:null},r="Azure DevOps Monorepo Pipeline Architecture",d={},c=[{value:"Context and Problem Statement",id:"context-and-problem-statement",level:2},{value:"Decision Drivers",id:"decision-drivers",level:2},{value:"Considered Options",id:"considered-options",level:2},{value:"Decision Outcome",id:"decision-outcome",level:2},{value:"Pipeline Architecture",id:"pipeline-architecture",level:3},{value:"Change Detection Strategy",id:"change-detection-strategy",level:3},{value:"Conditional Deployment Logic",id:"conditional-deployment-logic",level:3},{value:"Caching Strategy",id:"caching-strategy",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Validation",id:"validation",level:2},{value:"Quality Gates",id:"quality-gates",level:3},{value:"Deployment Reliability",id:"deployment-reliability",level:3},{value:"Pros and Cons of the Options",id:"pros-and-cons-of-the-options",level:2},{value:"Single Pipeline with Manual Conditions",id:"single-pipeline-with-manual-conditions",level:3},{value:"Separate Pipelines per Application",id:"separate-pipelines-per-application",level:3},{value:"Conditional Deployment with Change Detection",id:"conditional-deployment-with-change-detection",level:3},{value:"Matrix Strategy",id:"matrix-strategy",level:3},{value:"Pipeline Structure",id:"pipeline-structure",level:2},{value:"Main Pipeline (<code>azure-pipelines.yml</code>)",id:"main-pipeline-azure-pipelinesyml",level:3},{value:"Application-Specific Deployment Templates",id:"application-specific-deployment-templates",level:3},{value:"Change Detection Workflow",id:"change-detection-workflow",level:3},{value:"More Information",id:"more-information",level:2},{value:"Related ADRs",id:"related-adrs",level:3},{value:"Key Implementation Files",id:"key-implementation-files",level:3},{value:"External Dependencies",id:"external-dependencies",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"azure-devops-monorepo-pipeline-architecture",children:"Azure DevOps Monorepo Pipeline Architecture"})}),"\n",(0,l.jsx)(n.h2,{id:"context-and-problem-statement",children:"Context and Problem Statement"}),"\n",(0,l.jsx)(n.p,{children:"CellixJS is a monorepo containing multiple applications (API, UI Community, Docs) and shared packages with complex interdependencies. The CI/CD pipeline needed to efficiently handle builds and deployments while:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Only building and deploying applications that have actual changes"}),"\n",(0,l.jsx)(n.li,{children:"Optimizing build times through intelligent caching"}),"\n",(0,l.jsx)(n.li,{children:"Supporting both pull request validation and main branch deployments"}),"\n",(0,l.jsx)(n.li,{children:"Maintaining reliability and avoiding missed deployments"}),"\n",(0,l.jsx)(n.li,{children:"Integrating with Turborepo's dependency graph analysis"}),"\n",(0,l.jsx)(n.li,{children:"Managing different deployment targets (Azure Functions, Static Web Apps, GitHub Pages)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The challenge was designing a pipeline that could intelligently detect changes in a monorepo structure and conditionally execute deployment stages without sacrificing reliability or developer experience."}),"\n",(0,l.jsx)(n.h2,{id:"decision-drivers",children:"Decision Drivers"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Build Efficiency"}),": Avoid unnecessary builds and deployments for unchanged applications"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reliability"}),": Ensure no deployments are missed due to incorrect change detection"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Caching Strategy"}),": Maximize cache hits for dependencies, tools, and build outputs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Developer Experience"}),": Fast PR builds and clear feedback on pipeline status"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Maintainability"}),": Simple pipeline structure that's easy to understand and modify"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Integration with Turborepo"}),": Leverage existing dependency graph analysis"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Multi-environment Support"}),": Support different deployment configurations (dev, qa, prod)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"considered-options",children:"Considered Options"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Single Pipeline with Manual Conditions"}),": All applications deployed every time with manual skip conditions"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Separate Pipelines per Application"}),": Individual pipelines triggered by path-based filters"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Conditional Deployment with Change Detection"}),": Single pipeline with intelligent change detection and conditional stages"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Matrix Strategy"}),": Use Azure DevOps matrix jobs to parallelize different application deployments"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"decision-outcome",children:"Decision Outcome"}),"\n",(0,l.jsxs)(n.p,{children:["Chosen option: ",(0,l.jsx)(n.strong,{children:"Conditional Deployment with Change Detection"}),", implemented through:"]}),"\n",(0,l.jsx)(n.h3,{id:"pipeline-architecture",children:"Pipeline Architecture"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Single main pipeline"})," (",(0,l.jsx)(n.code,{children:"azure-pipelines.yml"}),") with template-based stage organization"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Monorepo build stage"})," (",(0,l.jsx)(n.code,{children:"monorepo-build-stage.yml"}),") handles all build operations"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Monorepo deployment stage"})," (",(0,l.jsx)(n.code,{children:"monorepo-deployment-stage.yml"}),") orchestrates conditional deployments"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Change detection script"})," (",(0,l.jsx)(n.code,{children:"detect-changes.cjs"}),") uses Turborepo to determine affected applications"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"change-detection-strategy",children:"Change Detection Strategy"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Turborepo-based affected package detection\nconst turboCommand = `npx turbo run build --affected --dry-run=json`;\n\n// Per-application dependency scope analysis\nconst scopeCommand = `npx turbo run build --filter=${appConfig.filter} --dry-run=json`;\n\n// Pipeline variables for conditional execution\nsetPipelineVariable('HAS_BACKEND_CHANGES', hasBackendChanges);\nsetPipelineVariable('HAS_FRONTEND_CHANGES', hasFrontendChanges);\nsetPipelineVariable('HAS_DOCS_CHANGES', hasDocsChanges);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"conditional-deployment-logic",children:"Conditional Deployment Logic"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"# Build artifacts only for affected applications\ncondition: and(succeeded(), eq(variables['BuildJob.HAS_BACKEND_CHANGES'], 'true'))\n\n# Deploy only affected applications\ncondition: eq(stageDependencies.Build.Build.outputs['BuildJob.HAS_FRONTEND_CHANGES'], 'true')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"PNPM Cache"}),": Dependency installation caching across builds"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Turborepo Cache"}),": Build output caching with remote Azure Cache@2"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Tool Caches"}),": Azure Functions Core Tools, Java JRE, SonarCloud scanner"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Browser Cache"}),": Playwright browsers for UI testing"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,l.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Resource Efficiency"}),": Only affected applications consume deployment resources through conditional execution"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Scalable Architecture"}),": Template-based structure allows adding new applications without modifying core pipeline logic"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Integrated Change Detection"}),": Uses Turborepo's dependency graph analysis for determining affected packages"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Clear Pipeline Structure"}),": Template-based organization with separation between build and deployment concerns"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Complex Change Detection Logic"}),": Sophisticated logic required to avoid missed deployments, including fallback strategies"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Debugging Complexity"}),": Conditional execution can make pipeline debugging more challenging"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cache Dependencies"}),": Pipeline relies on multiple caching layers (PNPM, Turborepo, tools, browsers)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Monorepo Coupling"}),": All applications share the same pipeline lifecycle and dependency detection"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,l.jsx)(n.p,{children:"The pipeline architecture includes:"}),"\n",(0,l.jsx)(n.h3,{id:"quality-gates",children:"Quality Gates"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"SonarCloud Integration"}),": Code quality and security analysis with ",(0,l.jsx)(n.code,{children:"sonarcloud-buildbreaker@2"})," task for quality gate enforcement"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Test Coverage"}),": Test execution through Turborepo's task orchestration for affected packages"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Artifact Validation"}),": Build artifacts only created for applications with detected changes"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"deployment-reliability",children:"Deployment Reliability"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Fallback Strategy"}),": Conservative deployment assumption on change detection failures (sets all applications as affected)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Environment Propagation"}),": Environment variables passed through pipeline stages using Azure DevOps variable groups"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Dependency Management"}),": Infrastructure deployment jobs run before application deployment jobs"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"pros-and-cons-of-the-options",children:"Pros and Cons of the Options"}),"\n",(0,l.jsx)(n.h3,{id:"single-pipeline-with-manual-conditions",children:"Single Pipeline with Manual Conditions"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Simple pipeline structure, no complex logic required"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Guaranteed consistent deployment behavior"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": Wastes resources on unnecessary deployments"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": Slower build times due to redundant operations"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"separate-pipelines-per-application",children:"Separate Pipelines per Application"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Complete isolation between application deployments"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Simple path-based triggering"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": Difficult to manage shared dependencies and infrastructure"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": No coordination between related deployments"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": Duplicated pipeline logic across applications"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"conditional-deployment-with-change-detection",children:"Conditional Deployment with Change Detection"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Optimal resource utilization and build performance"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Integrates naturally with Turborepo's dependency analysis"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Maintains single source of truth for pipeline logic"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Supports complex interdependency scenarios"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Neutral"}),": Requires sophisticated change detection logic"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": More complex debugging and troubleshooting"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"matrix-strategy",children:"Matrix Strategy"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Good"}),": Parallel execution of different application deployments"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Neutral"}),": Could be combined with conditional deployment strategy"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": Complex coordination between matrix jobs"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Bad"}),": Difficult to handle shared infrastructure dependencies"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"pipeline-structure",children:"Pipeline Structure"}),"\n",(0,l.jsxs)(n.h3,{id:"main-pipeline-azure-pipelinesyml",children:["Main Pipeline (",(0,l.jsx)(n.code,{children:"azure-pipelines.yml"}),")"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"stages:\n  - template: ./build-pipeline/core/monorepo-build-stage.yml\n    parameters:\n      # Build configuration and caching parameters\n  - template: ./build-pipeline/core/monorepo-deployment-stage.yml\n    parameters:\n      # Environment-specific deployment parameters\n"})}),"\n",(0,l.jsx)(n.h3,{id:"application-specific-deployment-templates",children:"Application-Specific Deployment Templates"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"apps/api/deploy-api.yml"}),": Azure Functions deployment with infrastructure setup"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"apps/ui-community/deploy-ui-community.yml"}),": Static Web App deployment to Azure Storage"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"apps/docs/deploy-docs.yml"}),": GitHub Pages deployment for documentation"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"change-detection-workflow",children:"Change Detection Workflow"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Determine Build Context"}),": PR vs. push build, set appropriate comparison base"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Run Turborepo Analysis"}),": Get globally affected packages using ",(0,l.jsx)(n.code,{children:"--affected --dry-run=json"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Compute Application Scopes"}),": For each app, get dependency scope using ",(0,l.jsx)(n.code,{children:"--filter"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Calculate Intersections"}),": Determine which applications have affected dependencies"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Set Pipeline Variables"}),": Expose boolean flags for conditional stage execution"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Fallback Strategy"}),": On detection errors, conservatively assume all applications affected"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"more-information",children:"More Information"}),"\n",(0,l.jsx)(n.h3,{id:"related-adrs",children:"Related ADRs"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/docs/decisions/monorepo-turborepo",children:"ADR-0019: Monorepo Structure and Turborepo"})," - Foundation for build optimization"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/docs/decisions/azure-infrastructure-deployments",children:"ADR-0014: Azure Infrastructure Deployments"})," - Infrastructure deployment approach"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"/docs/decisions/docusaurus-azure-pipeline-stages",children:"ADR-0018: Docusaurus Azure Pipeline Stages"})," - Documentation deployment strategy"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"key-implementation-files",children:"Key Implementation Files"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"azure-pipelines.yml"})," - Main pipeline definition"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"build-pipeline/core/monorepo-build-stage.yml"})," - Build orchestration template"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"build-pipeline/core/monorepo-deployment-stage.yml"})," - Deployment orchestration template"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"build-pipeline/scripts/detect-changes.cjs"})," - Change detection logic"]}),"\n",(0,l.jsxs)(n.li,{children:["Application-specific deployment templates in ",(0,l.jsx)(n.code,{children:"apps/*/deploy-*.yml"})]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"external-dependencies",children:"External Dependencies"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/",children:"Azure DevOps Pipelines"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://turbo.build/repo/docs/reference/command-line-reference#turbo-run-task---affected",children:"Turborepo Affected Commands"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/cache",children:"Azure Cache@2 Task"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.sonarcloud.io/advanced-setup/ci-based-analysis/azure-devops-integration/",children:"SonarCloud Integration"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},9900:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(6364);const l={},t=s.createContext(l);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);