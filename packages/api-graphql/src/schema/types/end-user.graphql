type EndUser implements MongoBase {
  externalId: String
  displayName: String
  accessBlocked: Boolean
  tags: [String]

  personalInformation: EndUserPersonalInformation

  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}

type EndUserPersonalInformation {
  identityDetails: EndUserIdentityDetails
  contactInformation: EndUserContactInformation
}

type EndUserIdentityDetails {
  lastName: String!
  legalNameConsistsOfOneName: Boolean!
  restOfName: String
}

type EndUserContactInformation {
  email: String!
}

extend type Query {
  endUser(id: ObjectID!): EndUser
  endUsers: [EndUser]
  getCurrentEndUserAndCreateIfNotExists: EndUser
}

# extend type Mutation {
#   userCreate: EndUserMutationResult!
#   userUpdate(input: UserUpdateInput!): EndUserMutationResult!
# }


# type EndUserMutationResult implements MutationResult {
#   status: MutationStatus!
#   endUser: EndUser
# }

# input EndUserUpdateInput {
#   id: ObjectID!
#   displayName: String
#   personalInformation: PersonalInformationInput
# }

# input PersonalInformationInput {
#   identityDetails: IdentityDetailsInput
#   contactInformation: ContactInformationInput
# }

# input IdentityDetailsInput {
#   lastName: String
#   legalNameConsistsOfOneName: Boolean
#   restOfName: String
# }

# input ContactInformationInput {
#   email: String
# }